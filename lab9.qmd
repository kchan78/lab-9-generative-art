---
title: "Lab 9: Generative Art"
author: "Katherine Chan"
format: html
editor: visual
---

## Set Up

```{r}
#| label: library-loads
#| message: FALSE

library(ggplot2)
library(ggthemes)
library(ggforce)
library(deldir)
```

# Art with Ordinary Plotting Functions

```{r}
#| label: penguins

# load in palmer penguins dataset
penguins <- palmerpenguins::penguins
```

```{r}
#| label: plot-penguins
#| warning: FALSE

penguins |> 
  ggplot(aes(bill_length_mm*2, body_mass_g, color = island)) +
  geom_point(shape = 8, show.legend = FALSE) +
  geom_spoke(aes(angle = flipper_length_mm/10, radius = year/100), 
             show.legend = FALSE)  +
  coord_polar() + 
  theme_void() 
  
```


# Tiles and Tess

```{r}
unboxy <- function(iterations, layers) {
  
  coeffs <- array(
    data = runif(16 * layers, min = -1, max = 1), 
    dim = c(4, 4, layers)
  )
  
  point0 <- matrix(
    data = runif(4, min = -1, max = 1), 
    nrow = 1,
    ncol = 4
  )
  
  funs <- list(
    function(point) point + (sum(point ^ 2)) ^ (1/3),
    function(point) sin(point),
    function(point) 2 * sin(point),
    function(point) cos(point) - 1
  )
  
  update <- function(point, t) {
    l <- sample(layers, 1)
    f <- sample(funs, 1)[[1]]
    z <- point[4]
    point[4] <- 1
    point <- f(point %*% coeffs[,,l])
    point[4] <- (point[4] + z)/2
    return(point)
  }
  
  points <- accumulate(1:iterations, update, .init = point0)
  points <- matrix(unlist(points), ncol = 4, byrow = TRUE)
  points <- as_tibble(as.data.frame(points)) 
  names(points) <- c("x", "y", "val", "n")
  return(points)
}
```


```{r}
#| label: generate-data

set.seed(1)

# generate primary data from iterated function system
dat <- unboxy(iterations = 1000, layers = 5) 

# generate layer data
bg_dat <- tibble::tibble(
  x = runif(5000, min = -4, max = 4),
  y = runif(5000, min = -4, max = 4),
  val = x/2
)

```


```{r}
sample_canva <- function(seed = NULL, n = 4) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]] |>
    (\(x) colorRampPalette(x)(n))()  
}
```

```{r}
show_col(sample_canva(seed = 5, n = 5))
```

```{r}
#| label: plot-tesselation
#| warning: FALSE

# create the canvas
ggplot(dat, aes(x, y, fill = val)) +
  theme_void() + 
  coord_equal(xlim = c(-2.5, 2.5), ylim = c(-2.5, 2.5)) + 
  scale_fill_gradientn(colours = sample_canva(seed = 5, n = 5)) + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  # voronoi tesselation of box-inspired dataset
  geom_voronoi_tile(
    aes(size = abs(size)/4),
    colour = "white",
    show.legend = FALSE
  ) +
  # voronoi tesselation of uniform random generated data for texture
  geom_voronoi_tile(
    data = bg_dat,
    radius = .002,
    size = 0.01,
    show.legend = FALSE,
    max.radius = .1, 
    expand = -.005,
    fill = "grey"
  )
```
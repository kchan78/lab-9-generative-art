---
title: "Lab 9: Generative Art"
author: "Katherine Chan"
format: html
editor: visual
---

```{r}
#| label: library-loads
#| message: FALSE

library(ggplot2)
library(ggthemes)
library(ggforce)
library(deldir)
```


```{r}
mpg |>
  ggplot(aes(displ, hwy, colour = drv)) + 
  geom_point()

mpg |>
  ggplot(aes(displ, hwy, colour = drv, size = cyl)) + 
  geom_point(show.legend = FALSE) + 
  theme_void() + 
  scale_color_brewer()

mpg |>
  ggplot(aes(displ, hwy, colour = drv)) + 
  geom_point(show.legend = FALSE, size = 4) + 
  geom_point(show.legend = FALSE, size = 1, colour = "#222222") + 
  coord_polar() + 
  theme_void() + 
  scale_color_brewer()
```


```{r}
#| warning: FALSE
mpg |> 
  ggplot(aes(displ, hwy, color = model)) +
  geom_point(shape = 8, show.legend = FALSE) +
  geom_spoke(aes(angle = cty, radius = cyl), show.legend = FALSE)  +
  coord_polar() + 
  theme_void() + 
  scale_color_brewer()
  
```


# My styled plot
```{r}
sample_data <- function(seed = NULL, n = 100){
  if(!is.null(seed)) set.seed(seed)
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.5, max = .5),
    y1 = y0 + runif(n, min = -.5, max = .5),
    shade = runif(n), 
    size = runif(n),
    shape = factor(sample(0:22, size = n, replace = TRUE)),
    alpha = runif(n)
  )
}
```

```{r}
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}

sample_named_colours <- function(n = NULL, seed = 1) {
  if(!is.null(n)) set.seed(seed)
  sample(colours(distinct = TRUE), n)
}
```

```{r}
dat <- sample_data(n = 100, seed = 1) 
dat2 <- sample_data(n = 100, seed = 456)

pal <- sample_canva(seed = 2)
pal2 <- sample_named_colours(n = 2, seed = 7)
show_col(pal)
show_col(pal2)

#pal2 <- c("antiquewhite", "#234643")
```



```{r}
#| warning: FALSE

dat <- sample_data(n = 100, seed = 6) 
dat2 <- sample_data(n = 100, seed = 2)

pal <- sample_canva(seed = 90)
pal2 <- sample_named_colours(n = 2, seed = 8)

ggplot(
    data = dat,
    mapping = aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = 1/size,
      alpha = alpha
    )) + 
    scale_colour_gradientn(colours = pal) + 
    scale_fill_gradient(low = pal2[[1]], high = pal2[[2]]) +
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(
      colour = guide_none(),
      size = guide_none(),
      fill = guide_none(),
      shape = guide_none(),
      alpha = guide_none()
    ) +
 # coord_polar(clip = "off") +
  stat_density2d(geom="tile", 
                 aes(fill = after_stat(density)), 
                 contour = FALSE) +
  stat_density2d(data = dat2 |> mutate(x = x0 + 3,
                                       y = y0 + 9), 
                 geom="tile", 
                 aes(fill = after_stat(density)), 
                 contour = FALSE) +
    geom_point(shape = 8) + 
  geom_curve(
    data = dat2 |> mutate(size = 1/(size)), 
    aes(curvature = alpha)
  )
```

# Tiles and Tess

```{r}
unboxy <- function(iterations, layers) {
  
  coeffs <- array(
    data = runif(16 * layers, min = -1, max = 1), 
    dim = c(4, 4, layers)
  )
  
  point0 <- matrix(
    data = runif(4, min = -1, max = 1), 
    nrow = 1,
    ncol = 4
  )
  
  funs <- list(
    function(point) point + (sum(point ^ 2)) ^ (1/3),
    function(point) sin(point),
    function(point) 2 * sin(point),
    function(point) cos(point) - 1
  )
  
  update <- function(point, t) {
    l <- sample(layers, 1)
    f <- sample(funs, 1)[[1]]
    z <- point[4]
    point[4] <- 1
    point <- f(point %*% coeffs[,,l])
    point[4] <- (point[4] + z)/2
    return(point)
  }
  
  points <- accumulate(1:iterations, update, .init = point0)
  points <- matrix(unlist(points), ncol = 4, byrow = TRUE)
  points <- as_tibble(as.data.frame(points)) 
  names(points) <- c("x", "y", "val", "n")
  return(points)
}
```


```{r}
#| label: generate-data

set.seed(1)

# generate primary data from iterated function system
dat <- unboxy(iterations = 1000, layers = 5) 

# generate layer data
bg_dat <- tibble::tibble(
  x = runif(5000, min = -4, max = 4),
  y = runif(5000, min = -4, max = 4),
  val = x/2
)

```


```{r}
sample_canva <- function(seed = NULL, n = 4) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]] |>
    (\(x) colorRampPalette(x)(n))()  
}
```

```{r}
show_col(sample_canva(seed = 5, n = 5))
```

```{r}
#| label: plot-tesselation
#| warning: FALSE

# create the canvas
ggplot(dat, aes(x, y, fill = val)) +
  theme_void() + 
  coord_equal(xlim = c(-2.5, 2.5), ylim = c(-2.5, 2.5)) + 
  scale_fill_gradientn(colours = sample_canva(seed = 5, n = 5)) + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  # voronoi tesselation of box-inspired dataset
  geom_voronoi_tile(
    aes(size = abs(size)/4),
    colour = "white",
    show.legend = FALSE
  ) +
  # voronoi tesselation of uniform random generated data for texture
  geom_voronoi_tile(
    data = bg_dat,
    radius = .002,
    size = 0.01,
    show.legend = FALSE,
    max.radius = .1, 
    expand = -.005,
    fill = "grey"
  )
```
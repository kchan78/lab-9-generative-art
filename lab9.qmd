---
title: "Lab 9: Generative Art"
author: "Katherine Chan"
format: html
editor: visual
---

## Set Up

```{r}
#| label: library-loads
#| message: FALSE

library(ggplot2)
library(ggthemes)
library(ggforce)
library(deldir)
```

# Art with Ordinary Plotting Functions

```{r}
#| label: penguins

# load in palmer penguins dataset
penguins <- palmerpenguins::penguins
```

```{r}
#| label: plot-penguins
#| warning: FALSE

penguins |> 
  ggplot(aes(bill_length_mm*2, body_mass_g, color = island)) +
  geom_point(shape = 8, show.legend = FALSE) +
  geom_spoke(aes(angle = flipper_length_mm/10, radius = year/100), 
             show.legend = FALSE)  +
  coord_polar() + 
  theme_void() 
  
```

#### A Penguin's Dilemma, 2024

###### *Katherine Chan*

###### *ggplot geometries on canvas*

Penguins inhabit some of the most rapidly changing living conditions on Earth due to climate change. The ad√©lie penguin (Pygoscelis adeliae), chinstrap penguin (Pygoscelis antarctica), and gentoo penguin (Pygoscelis papua) all inhabit land on or near the Antactic Peninsula. As their homeland melts piece by piece, they are forced to adapt to changing environmental patterns, in the ocean and on land. With an unconventional use of coordinate systems and geometries, Chan represents both the fragile Antarctic ecosystem and everyday obstacles that penguins take to ensure their survival. The circular patterns elicit the dizzying reality that penguins face today, while the careful use of color provides perspective deep from the heart of Antarctica.

------------------------------------------------------------------------

Code choices:

Using the `palmerpenguins` dataset, I use bill length and body mass to plot points on a 2x2 graph. The `coord_polar` function transforms the piece from the standard Cartesian coordinate system, where points are plotted based on horizontal and vertical distance, to a system where points are plotted based on angle and radius - causing a circular shape. I set the theme to "void" to remove gridlines and background color. I also used the color palette, entitled "PuBuGn", to use colors reminiscent of a wintery, snowy atmosphere; colors, which represent the island each penguin inhabits, tend to change as radius increases. I set the `geom_point` as `shape = 8` to create the snowflake-like shape. Meanwhile, I used `geom_spoke` to create the longer, curved lines. Finally, I hid the legends in both geometries, which would otherwise detract from the artwork.

# Generative Art

```{r}
#| label: iterated-function-system

# function to generated data using iterated systems
unboxy <- function(iterations, layers) {
  
  coeffs <- array(
    data = runif(16 * layers, min = -1, max = 1), 
    dim = c(4, 4, layers)
  )
  
  point0 <- matrix(
    data = runif(4, min = -1, max = 1), 
    nrow = 1,
    ncol = 4
  )
  
  funs <- list(
    function(point) point + (sum(point ^ 2)) ^ (1/3),
    function(point) sin(point),
    function(point) 2 * sin(point),
    function(point) cos(point) - 1
  )
  
  update <- function(point, t) {
    l <- sample(layers, 1)
    f <- sample(funs, 1)[[1]]
    z <- point[4]
    point[4] <- 1
    point <- f(point %*% coeffs[,,l])
    point[4] <- (point[4] + z)/2
    return(point)
  }
  
  points <- purrr::accumulate(1:iterations, update, .init = point0)
  points <- matrix(unlist(points), ncol = 4, byrow = TRUE)
  points <- tibble::as_tibble(as.data.frame(points)) 
  names(points) <- c("x", "y", "val", "size")
  return(points)
}

```

```{r}
#| label: palette-function

# function to randomly sample a palette from ggthemes
sample_canva <- function(seed = NULL, n = 4) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]] |>
    (\(x) colorRampPalette(x)(n))()  
}
```

```{r}
#| label: generate-data

set.seed(1)

# generate primary data from iterated function system
dat <- unboxy(iterations = 1000, layers = 5) 

# generate layer data
bg_dat <- tibble::tibble(
  x = runif(5000, min = -4, max = 4),
  y = runif(5000, min = -4, max = 4),
  val = x/2
)

```

```{r}
#| label: plot-tesselation
#| warning: FALSE

# create the canvas
ggplot(dat, aes(x, y, fill = val)) +
  theme_void() + 
  coord_equal(xlim = c(-2.5, 2.5), ylim = c(-2.5, 2.5)) + 
  scale_fill_gradientn(colours = sample_canva(seed = 5, n = 5)) + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  # voronoi tesselation of box-inspired dataset
  geom_voronoi_tile(
    aes(size = abs(size)/4),
    colour = "white",
    show.legend = FALSE
  ) +
  # voronoi tesselation of uniform random generated data for texture
  geom_voronoi_tile(
    data = bg_dat,
    radius = .002,
    size = 0.01,
    show.legend = FALSE,
    max.radius = .1, 
    expand = -.005,
    fill = "grey"
  )
```

#### Shatter, 2024

###### *Katherine Chan*

###### *ggforce geometries on canvas*

In a modern and mesmerizing tesselation, the artist portrays a brightened twist to the otherwise somber experience of breaking. This artwork reimagines this action and feeling as cathardic happening, interwoven with intricate patterns. Amidst the chaos of the kaleidoscope of shapes lies a carefully balanced and precise mathematical structure. Muted, soft, yet calming colors adds an introspective element to the piece. All things in the universe were created, yet all things in the universe break down. "Shatter" invites you to contemplate the reality, complexity, and beauty in this intriguing truth.

------------------------------------------------------------------------

Code choices:

Based on the "Unboxing system" code source provided by R-tist Danielle Navarro, I implemented an iterated function system. I added an additional function to update the generated data points such that an additional column could be created. The primary base uses `theme_void` to provide a clean, minimalist canvas without the distraction of background elements. Using the `sample_canva()` function to randomly sample a color palette from `ggthemes`, I settled on color scheme that I found aesthetically pleasing, with hex values shown below here:

```{r}
#| label: show-palette
scales::show_col(sample_canva(seed = 5, n = 5))
```

When generating data, I set the number of iterations to 1000 for the "primary layer" (the bottom, colored layer) to create 1000 data points to be made into Voronoi tiles and 5000 points to create the small, fragmented Voronoi tiles for the texture layer (the top, gray layer). In the primary layer, I allowed the sizes of the tiles to change based on values from the iterated function system and adjusted the size appropriately to fit the grid size with `abs(size)/4`. In between tiles, I added a white lining as negative space. For the texture layer, I adjusted the radius, size, maximum radius, and expansion to create small fragment-like tile tesselations. I selected a solid gray color to soften the effect of this layer, creating a dusty finish. Finally, I hid the legends in both geometries, which would otherwise detract from the artwork.
